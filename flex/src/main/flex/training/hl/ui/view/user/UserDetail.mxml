<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 verticalGap="10"
		 horizontalCenter="68"
		 creationComplete="init()"
		 >
	<fx:Declarations>
		<mx:StringValidator id="firstNameValidator" minLength="1" maxLength="20" source="{firstName}" property="text"/>
		<mx:StringValidator id="lastNameValidator" minLength="1" maxLength="20" source="{lastName}" property="text"/>
		<mx:StringValidator id="userNameValidator" minLength="1" maxLength="20" source="{userName}" property="text"/>
		<mx:StringValidator id="passwordValidator" minLength="1" maxLength="20" source="{password}" property="text"/>
		<s:RemoteObject id="trainingService" destination="trainingFlexService" result="userService_resultHandler(event)" fault="userService_faultHandler(event)"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ItemClickEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import training.hl.bean.Profile;
			import training.hl.bean.Role;
			import training.hl.bean.User;
			import training.hl.bean.enums.Gender;
			import training.hl.event.UserEvent;
			import training.hl.ui.presenter.UserDetailPresentationModel;
			[Bindable]
			public var model:UserDetailPresentationModel;
			[Bindable]
			private var validatorArr:Array;
			private var validForm:Boolean;
			private var user:User;
			
			private function init():void
			{
				validatorArr = new Array();
				validatorArr.push(userNameValidator);
				validatorArr.push(passwordValidator);
				validatorArr.push(firstNameValidator);
				validatorArr.push(lastNameValidator);
			}
			
			private function clickCheckBoxHandler(event:MouseEvent):void
			{
				var checkbox:Object = event.currentTarget;
				var roleId:Number = Number(checkbox.getRepeaterItem().id);
				var checked:Boolean = checkbox.selected;
				for each(var role:Role in model.roles)
				{
					if(role.id == roleId)
					{
						if(checked)
						{
							role.checked = true;
						}
						else
						{
							role.checked = false;	
						}
					}
				}
			}
			
			private function validateForm(event:MouseEvent):void
			{
				var totalNumOfErrors:int = 0;
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);
				var genderSelected:Boolean = true;
				if(!model.female && !model.male)
				{
					totalNumOfErrors++;
					genderSelected = false;
				}
				totalNumOfErrors += validatorErrorArray.length;
				var hasUserRole:Boolean = false;
				for each(var role:Role in model.roles)
				{
					if(role.checked && role.name == 'ROLE_USER')
					{
						hasUserRole = true;
					}
				}
				if(!hasUserRole)
				{
					totalNumOfErrors++;
				}
				if(totalNumOfErrors == 0)
				{
					validForm = true;
				}
				else
				{
					var err:ValidationResultEvent;
					var errorMessageArray:Array = [];
					for each (err in validatorErrorArray)
					{
						var errField:String = FormItem(err.currentTarget.source.parent).label
						errorMessageArray.push(errField + ": " + err.message);
					}
					var errorMessage:String = "";
					if(errorMessageArray.length != 0)
					{
						errorMessage += errorMessageArray.join("\n\n");
					}
					if(!genderSelected)
					{
						if(totalNumOfErrors == 1)
						{						
							errorMessage += "Gender: Please select one.";
						}
						else
						{
							errorMessage += "\n\nGender: Please select one.";
						}
					}
					if(!hasUserRole)
					{
						if(totalNumOfErrors == 1)
						{						
							errorMessage += "Role: Please select at one role and ROLE_USER has to be selected.";
						}
						else
						{
							errorMessage += "\n\nRole: Please select at one role and ROLE_USER has to be selected.";
						}
					}
					Alert.show(errorMessage, "Invalid form...", Alert.OK);
				}
			}
			
			private function saveUser(event:MouseEvent):void
			{
				validateForm(event);
				if(validForm)
				{
					user = new User();
					if(model.selectedUser != null)
					{
						user.id = model.selectedUser.id;
					}
					user.firstName = StringUtil.trim(firstName.text);
					user.password = StringUtil.trim(password.text);
					user.lastName = StringUtil.trim(lastName.text);
					user.userName = StringUtil.trim(userName.text);
					user.age = age.value;
					if(gender.selectedValue.toString() == "FEMALE")
					{
						user.gender = Gender.FEMALE;
					}
					else
					{
						user.gender = Gender.MALE;	
					}
					var roles:ArrayCollection = new ArrayCollection();
					for each(var role:Role in model.roles)
					{
						if(role.checked)
						{
							roles.addItem(role);
						}
					}
					user.roles = roles;
					var profile:Profile = new Profile();
					profile.hobbies = StringUtil.trim(hobbies.text);
					profile.homePage = StringUtil.trim(homePage.text);
					profile.bio = StringUtil.trim(bio.text);
					user.profile = profile;
					trainingService.saveUser(user);
				}
			}
			
			private function userService_resultHandler(event:ResultEvent):void
			{
				var userEvent:UserEvent = new UserEvent(UserEvent.ADD);
				userEvent.user = User(event.result);
				dispatchEvent(userEvent);
				Alert.show("User saved/updated!", "User Comfirmation Window");
			}
			
			private function userService_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.toString());
			}
			
			private function selectGender(event:ItemClickEvent):void
			{
				var gender:String = event.currentTarget.selectedValue;
				if(gender == 'FEMALE')
				{
					model.female = true;
				}
				else
				{
					model.male = true;	
				}
			}

		]]>
	</fx:Script>
	
	<mx:FormItem label="User Name" required="true">
		<s:TextInput width="300" text="{model.selectedUser.userName}" id="userName"/>
	</mx:FormItem>
	
	<mx:FormItem label="Password" required="true">
		<s:TextInput width="300" text="{model.emptyPassword}" id="password" displayAsPassword="true"/>
	</mx:FormItem>
	
	<mx:FormItem label="First Name" required="true">
		<s:TextInput width="300" text="{model.selectedUser.firstName}" id="firstName"/>
	</mx:FormItem>
	
	<mx:FormItem label="Last Name" required="true">
		<s:TextInput width="300" text="{model.selectedUser.lastName}" id="lastName"/>
	</mx:FormItem>
	
	<mx:FormItem label="Age" required="true">
		<s:NumericStepper minimum="20" maximum="80" value="{model.selectedUser.age as Number}" id="age"/>
	</mx:FormItem>
	
	<mx:FormItem label="Gender" required="true" width="382">
		<mx:RadioButtonGroup id="gender" itemClick="selectGender(event)"/>
		<mx:RadioButton x="118" y="1" label="Male" groupName="gender" value="MALE" selected="{model.male}"/>
		<mx:RadioButton x="161" y="3" label="Female" groupName="gender" value="FEMALE" selected="{model.female}"/>
	</mx:FormItem>
	
	<mx:FormItem label="Role" required="true" width="382">
		<mx:Tile direction="horizontal" x="174" y="0" width="300" height="100%">
			<mx:Repeater id="role" dataProvider="{model.roles}">
				<mx:CheckBox label="{role.currentItem.name}" selected="{role.currentItem.checked}" click="clickCheckBoxHandler(event)"/>
			</mx:Repeater>
		</mx:Tile>
	</mx:FormItem>
	
	<mx:FormItem label="Homepage" width="382">
		<s:TextInput width="300" text="{model.selectedUser.profile.homePage}" id="homePage"/>
	</mx:FormItem>
	
	<mx:FormItem label="Bio">
		<s:TextArea width="300" text="{model.selectedUser.profile.bio}" id="bio"/>
	</mx:FormItem>
	
	<mx:FormItem label="Hobbies">
		<s:TextInput width="300" text="{model.selectedUser.profile.hobbies}" id="hobbies"/>
	</mx:FormItem>
	
	<mx:FormItem direction="horizontal" paddingTop="10">
		<s:Button label="Submit" styleName="navButton" id="submit" click="saveUser(event)"/>
	</mx:FormItem>
	
</mx:Form>